//
// +----------------------------------------------------------------------+
// | PHP2Go Web Development Framework                                     |
// +----------------------------------------------------------------------+
// | Copyright (c) 2002-2006 Marcos Pont                                  |
// +----------------------------------------------------------------------+
// | This library is free software; you can redistribute it and/or        |
// | modify it under the terms of the GNU Lesser General Public           |
// | License as published by the Free Software Foundation; either         |
// | version 2.1 of the License, or (at your option) any later version.   |
// | 																	  |
// | This library is distributed in the hope that it will be useful,      |
// | but WITHOUT ANY WARRANTY; without even the implied warranty of       |
// | MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU    |
// | Lesser General Public License for more details.                      |
// | 																	  |
// | You should have received a copy of the GNU Lesser General Public     |
// | License along with this library; if not, write to the Free Software  |
// | Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA             |
// | 02111-1307  USA                                                      |
// +----------------------------------------------------------------------+
//
// $Header: /www/cvsroot/php2go/resources/javascript/widgets/simplesearch.js,v 1.7 2006/11/19 17:58:20 mpont Exp $
// $Date: 2006/11/19 17:58:20 $
// $Revision: 1.7 $

if (!PHP2Go.included[PHP2Go.baseUrl + 'widgets/simplesearch.js']) {

PHP2Go.include(PHP2Go.baseUrl + 'inputmask.js');
PHP2Go.include(PHP2Go.baseUrl + 'validator.js');

/**
 * @fileoverview
 * This file contains the ReportSimpleSearch class, which contains
 * the client code of the search widget that can be included in the
 * HTML reports generated by the php2go.data.Report class. The search
 * widget is able to accumulate search filters, submitting them together
 */

/**
 * The ReportSimpleSearch controls the simple search widget
 * that can be included in PHP2Go HTML reports
 * @constructor
 * @param {String} instanceName Report instance name
 * @param {Array} masks Masks array
 * @param {String} searchUrl Search URL
 */
ReportSimpleSearch = function(instanceName, masks, searchUrl) {
	/**
	 * Report instance name
	 * @type String
	 */
	this.name = instanceName;
	/**
	 * Report target URL
	 * @type String
	 */
	this.searchUrl = searchUrl || document.location.pathname;
	/**
	 * Search fields select input
	 * @type Object
	 */
	this.fields = $(this.name + '_search_fields');
	/**
	 * Search operators select input
	 * @type Object
	 */
	this.operators = $(this.name + '_search_operators');
	/**
	 * Search masks
	 * @type Array
	 */
	this.masks = masks || [];
	/**
	 * Search term field
	 * @type Object
	 */
	this.term = $(this.name + '_search_term');
	/**
	 * Form that contains the seach fields
	 * @type Object
	 */
	this.form = this.fields.form;
	/**
	 * Set of action buttons: send, add, view, clear
	 * @type Array
	 */
	this.buttons = {
		send : $(this.name + '_search_send'),
		add : $(this.name + '_search_add'),
		view : $(this.name + '_search_view'),
		clear : $(this.name + '_search_clear')
	};
	/**
	 * Layer used to display current registered filters
	 * @type Object
	 */
	this.display = $(this.name + '_filters');
	/**
	 * Holds the current visibility state of the filters
	 * @type Boolean
	 */
	this.displayVisible = false;
	/**
	 * Registered filters
	 * @type Array
	 */
	this.filters = [];
	/**
	 * Indicates if the class filters database has changed since last page load
	 * @type Boolean
	 */
	this.changed = false;
	/**
	 * onSearch handler. This can be defined inside the report's XML specification
	 * @type Function
	 */
	this.onSearch = null;
	/**
	 * @ignore
	 */
	this.lastOpType;
	this.setup();
};

/**
 * Performs all initialization routines. Build filters display div,
 * restoring persistent filters from cookies. Register all field
 * and button event listeners
 * @type void
 */
ReportSimpleSearch.prototype.setup = function() {
	// build filters
	var strFilters = Cookie.get(this.name + '_filters');
	if (strFilters) {
		this.filters = strFilters.split('@@');
		this.buildFilters();
		this.toggleFiltersDisplay();
	} else {
		this.buildFilters();
	}
	// setup field event listeners
	var self = this;
	Event.addListener(this.fields, 'change', function(e) {
		var mask = self.getCurrentMask();
		if (mask) {
			var newMask = Mask.fromMaskName(mask);
			self.term.inputMask.mask = newMask;
			self.term.value = '';
			self.rebuildOperators();
		};
	});
	Event.addListener(this.term, 'keypress', function(e) {
		e = $EV(e);
		if (e.key() == 13) {
			self.sendSearch();
			e.stop();
		}
	});
	// setup search input mask
	InputMask.setup(this.term, NullMask);
	// setup button event listeners
	Event.addListener(this.buttons.send, 'click', this.sendSearch.bind(this));
	Event.addListener(this.buttons.add, 'click', function() {
		self.addFilter(true);
	});
	Event.addListener(this.buttons.view, 'click', this.toggleFiltersDisplay.bind(this));
	Event.addListener(this.buttons.clear, 'click', this.clearFilters.bind(this));
};

/**
 * Retrieve the current active mask, based on the current
 * selected field. If there is no selected field, this
 * method returns null
 * @type String
 */
ReportSimpleSearch.prototype.getCurrentMask = function() {
	var filt = this.fields.selectedIndex;
	if (filt > 0)
		return this.masks[filt-1];
	return null;
};

/**
 * Build HTML code of the filters display DIV. Called
 * just once, inside {@link ReportSimpleSearch#setup}
 * @access private
 * @type void
 */
ReportSimpleSearch.prototype.buildFilters = function() {
	var self = this;
	// current saved filters
	var j = 0, savedFilters = this.filters.map(function(item) {
		var splitted = item.split('|');
		return (
			"<tr><td style=\"width:100%;padding:4px;\">" +
			"<div style=\"float:left;\">"+splitted[0]+" <b>"+splitted[1].toUpperCase()+"</b> "+splitted[2]+"</div>"+
			"<div style=\"float:right;\"><a id=\""+item+"\" style=\"cursor:pointer;\">"+"<b>["+Lang.report.removeFilter+"]</b>"+"</a></div>"+
			"</td></tr>"
		);
	}).join("");
	// set filters HTML code
	this.display.update(
		"<table cellspacing=\"0\" style=\"width:100%;padding:2px;font-family:verdana;font-size:11px;color:#000000;text-decoration:none;background-color:#fff;border:1px solid #000\">"+
		"<tr id=\""+this.name+"_nofilters\" style=\"display:none;\"><td style=\"padding:4px;\">"+Lang.report.emptyFilters+"</td></tr>"+savedFilters+
		"<tr id=\""+this.name+"_closefilters\"><td style=\"padding:4px;\"><a id=\""+this.name+"_close\" style=\"float:right;cursor:pointer;\"><b>["+Lang.report.closeFilters+"]</b></a></td></tr>"+
		"</table>"
	);
	// add event listeners
	$C(this.display.getElementsByTagName('a')).walk(function(item, idx) {
		if (item.id == self.name + '_close')
			Event.addListener(item, 'click', self.toggleFiltersDisplay.bind(self));
		else
			Event.addListener(item, 'click', self.removeFilter.bind(self));
	});
	// turn on no filter message visibility
	if (this.filters.length == 0)
		$(this.name + '_nofilters').show();
};

/**
 * Called when a new filter field is selected, to rebuild the operators
 * select input based on the mask associated with the selected field
 * @access private
 * @type void
 */
ReportSimpleSearch.prototype.rebuildOperators = function() {
	var filt = this.fields, trg = this.operators;
	if (filt.selectedIndex > 0) {
		// get mask based on selected filter
		var src, mask = this.masks[filt.selectedIndex-1].replace(/[^A-Z]/, "");
		var type = (['WORD', 'EMAIL', 'URL', 'ZIP', 'STRING'].indexOf(mask) != -1 ? 'text' : 'numeric');
		// rebuild operators select input
		if (!this.lastOpType || type != this.lastOpType) {
			this.lastOpType = type;
			trg.options.length = 0;
			src = (['WORD', 'EMAIL', 'URL', 'ZIP', 'STRING'].indexOf(mask) != -1 ? $H(Lang.report.stringOperators) : $H(Lang.report.numberOperators));
			src.walk(function(item, idx) {
				trg.options[idx] = new Option(item.value, item.key);
			});
		} else {
			trg.options[0].selected = true;
		}
	}
};

/**
 * Verify if the current search parameters are valid: non empty
 * field, non empty operator and non empty and valid search term
 * @param {Boolean} focus Whether to move focus to the first empty or invalid  field
 * @type Boolean
 */
ReportSimpleSearch.prototype.isValidSearch = function(focus) {
	focus = !!focus;
	var f = this.fields, t = this.term;
	if (f.selectedIndex < 1) {
		(focus) && (f.focus());
		return false;
	}
	if (t.value.trim() == "") {
		(focus) && (t.focus());
		return false;
	}
	if (!this.validateTerm(t.value)) {
		alert(Lang.invalidValue);
		(focus) && (t.select());
		return false;
	}
	return true;
};

/**
 * Validates the search term using {@link Validator#isMask}
 * @param {String} val Search term
 * @access private
 * @type Boolean
 */
ReportSimpleSearch.prototype.validateTerm = function(val) {
	try {
		var mask = this.getCurrentMask();
		return (mask == 'STRING' ? true : Validator.isMask(this.term.value, mask));
	} catch(e) {
		return false;
	}
};

/**
 * Submit the search form
 * @param {Event} e Event reference
 * @type void
 */
ReportSimpleSearch.prototype.sendSearch = function(e) {
	var send = (this.addFilter(false) || (this.filters.length > 0 && (this.changed || confirm(Lang.report.resendConfirmation))));
	if (send) {
		var fl = [], ol = [], vl = [];
		this.filters.walk(function(item, idx) {
			var splitted = item.split('|');
			fl.push(splitted[3]);
			ol.push(splitted[4]);
			vl.push(splitted[2]);
		});
		$(this.name + '_search_serialized_fields').value = fl.join("|");
		$(this.name + '_search_serialized_operators').value = ol.join("|");
		$(this.name + '_search_serialized_values').value = vl.join("|");
		Cookie.set(this.name + "_mainop", ($(this.name + '_search_mainop_and').checked ? 'AND' : 'OR'), Cookie.buildLifeTime(0, 0, 10));
		if (this.onSearch)
			this.onSearch();
		this.form.submit();
	}
};

/**
 * Adds a new filter. This method reads the contents
 * of the field, operator and term values and creates
 * a new data filter. The added/removed filters are
 * persisted in a browser cookie
 * @param {Boolean} verbose Enable or disable verbose mode (added success message)
 * @type void
 */
ReportSimpleSearch.prototype.addFilter = function(verbose) {
	var f, o, t, trg, expr, idx;
	if (this.isValidSearch(true)) {
		f = this.fields, o = this.operators, t = this.term;
		expr =	f.options[f.selectedIndex].text + "|" + o.options[o.selectedIndex].text + "|" + t.value + "|" + f.options[f.selectedIndex].value + "|" + o.options[o.selectedIndex].value;
		if (this.filters.indexOf(expr) == -1) {
			// add new filter
			if (this.filters.length == 0)
				$(this.name + '_nofilters').hide();
			this.filters.push(expr);
			this.changed = true;
			// update cookie
			Cookie.set(this.name + "_filters", this.filters.join("@@"), Cookie.buildLifeTime(0, 0, 10));
			// create/insert new filter row
			var tr = $N('tr');
			var td = $N(
				'td', tr, {'width':'100%','padding':'4px'},
				"<div style=\"float:left;\">"+f.options[f.selectedIndex].text+" <b>"+o.options[o.selectedIndex].text.toUpperCase()+"</b> "+t.value+"</div>"+
				"<div style=\"float:right;\"><a id=\""+expr+"\" style=\"cursor:pointer;\">"+"<b>["+Lang.report.removeFilter+"]</b>"+"</a></div>"
			);
			trg = $(this.name + '_closefilters');
			trg.parentNode.insertBefore(tr, trg);
			Event.addListener(tr.getElementsByTagName('a')[0], 'click', this.removeFilter.bind(this));
			if (verbose) {
				alert(Lang.report.addedFilter);
				!this.displayVisible && this.toggleFiltersDisplay();
			}
			return true;
		} else {
			if (verbose)
				alert(Lang.duplicatedValue);
		}
	}
	return false;
};

/**
 * Removes an existent filter
 * @param {Event} e Event reference
 * @type void
 */
ReportSimpleSearch.prototype.removeFilter = function(e) {
	var f = this.filters, elm = $E($EV(e).element());
	// remove filter
	f.remove(f.indexOf(elm.getParentByTagName('a').id));
	if (f.length == 0)
		$(this.name + '_nofilters').show();
	// update cookie
	Cookie.set(this.name + "_filters", f.join("@@"), Cookie.buildLifeTime(0, 0, 10));
	// remove filter from filters display
	elm.getParentByTagName('tr').remove();
	this.changed = true;
};

/**
 * Toggles visibility of the filters display DIV
 * @type void
 */
ReportSimpleSearch.prototype.toggleFiltersDisplay = function() {
	this.display.toggleDisplay();
	this.displayVisible = (this.display.getStyle('display') != 'none');
};

/**
 * Remove all registered filters and redirect to the original search URL
 * @type void
 */
ReportSimpleSearch.prototype.clearFilters = function() {
	// clear cookie
	Cookie.set(this.name + "_filters", "", -3600);
	document.location.href = this.searchUrl;
};

PHP2Go.included[PHP2Go.baseUrl + 'widgets/simplesearch.js'] = true;

}