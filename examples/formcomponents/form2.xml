<?xml version="1.0" encoding="iso-8859-1"?>
<!-- PHP2Go Examples : form2.xml, used by formcomponents example -->
<!DOCTYPE form SYSTEM "..\..\docs\dtd\php2go_forms.dtd">
<form>

	<variable name="subset" default="1"/>

	<section name="PHP2Go Form Components Part 2" id="section">

		<combofield name="subset" label="Choose the Subset" default="~subset~">
			<option value="1" caption="Subset 1"/>
			<option value="2" caption="Subset 2"/>
			<option value="3" caption="Subset 3"/>
			<listener type="JS" event="onChange" action="window.location.href='?subset='+this.value"/>
		</combofield>

		<!--
			the datagrid component repeats a given fieldset for each result
			returned from a database query. this is useful when you have to
			edit detail or many-to-many records

			- the "datasource" and "fieldset" child nodes are mandatory
			- the "displayfield" node must contain (fieldset size + 1) columns
			- the result set aliases will be used as column titles
		-->
		<datagrid
			name="grid" label="DataGrid" tablewidth="400" showheader="T"
			headerstyle="blue_style" cellstyle="sample_medium_text"
		>
			<datasource>
				<keyfield>client_id</keyfield>
				<displayfield>
					client_id as "ID",
					name as "Name",
					null as "Comments",
					active as "Active"
				</displayfield>
				<lookuptable>client</lookuptable>
				<orderby>name</orderby>
				<limit>10</limit>
			</datasource>
			<fieldset>
				<editfield name="name" label="Name" size="15" maxlength="40" readonly="T"/>
				<editfield name="memo" label="Comments" size="25" maxlength="100"/>
				<checkfield caption="empty"/>
			</fieldset>
		</datagrid>

		<!--
			an editselectionfield is composed by a text input, a select input and a set of buttons.
			the text input must be used to define new options for the select input. the select input
			can be loaded with existent database values, and the difference will be submitted inside
			2 hidden fields, whose names can be defined in the "insfield" and "remfield" attributes

			- the "editfield" and "lookupfield" child nodes are mandatory
			- attributes like "upper", "lower", "capitalize", "autotrim" and "mask" will define what kind of values can be included in the list
		-->
		<editselectionfield
			name="edit_selection" label="EditSelectionField"
			required="T" insfield="included" remfield="removed"
		>
			<editfield name="new_value" label="Insert Values" size="20" autotrim="T" upper="T"/>
			<lookupfield name="choosen_values" label="Choosen Values" width="150"/>
		</editselectionfield>

		<!--
			lookupselectionfield is a form component that is composed by two select inputs
			and a set of buttons. the buttons may be used to copy options left to right and
			right to left. double clicking options also fire these actions

			- the "lookupfield" child nodes are mandatory
			- the left lookupfield must contain a valid "datasource" node
		-->
		<lookupselectionfield
			name="lookup_selection" label="LookupSelectionField"
			required="T" insfield="added" remfield="deleted"
		>
			<lookupfield name="available" label="Available Items" width="150">
				<datasource>
					<keyfield>id_product</keyfield>
					<displayfield>code</displayfield>
					<lookuptable>products</lookuptable>
					<orderby>code</orderby>
				</datasource>
			</lookupfield>
			<lookupfield name="selected" label="Selected Items" width="150"/>
		</lookupselectionfield>

		<!-- button group -->
		<buttons>
			<button name="submit" type="SUBMIT" value="Submit"/>
			<!--
				some form components execute special routines when form.reset() is called.
				this button was inserted here so that you can check these behaviours
			-->
			<button name="reset" type="RESET" value="Reset"/>
			<!--
				demonstration of a button whose JS action is inside the node's CDATA-section
				in this case, the JS code toggles enable state of all form fields
			-->
			<button name="disable" type="BUTTON" value="Disable">
				<listener type="JS" event="onClick"><![CDATA[
					if (typeof window.lastOp == 'undefined') {
						window.lastOp = false;
					} else {
						window.lastOp = !window.lastOp;
					}
					if (window.lastOp === true) {
						Form.enableAll('form');
						this.value = "Disable";
					} else {
						Form.disableAll('form');
						this.value = "Enable";
					}
				]]></listener>
			</button>
			<!-- back button -->
			<button name="back" type="BACK" value="Back"/>
		</buttons>

	</section>

</form>